# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名g1,g2...此处可配置多数据源
spring.shardingsphere.datasource.names=g1
#
# 配置允许后面的Bean覆盖前面名称重复的Bean
spring.main.allow-bean-definition-overriding=true
#
# 配置数据源具体内容————————包含  连接池，驱动，地址，用户名，密码
# 由于上面配置数据源只有g1因此下面只配置g1.type,g1.driver-class-name,g1.url,g1.username,g1.password
spring.shardingsphere.datasource.g1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.g1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.g1.url=jdbc:mysql://localhost:3306/goods_db?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.g1.username=root
spring.shardingsphere.datasource.g1.password=tiger
#
# 配置表的分布，表的策略
spring.shardingsphere.sharding.tables.goods.actual-data-nodes=g1.goods_$->{0..2}
#
# 指定goods表 主键gid 生成策略为 SNOWFLAKE(雪花ID)
spring.shardingsphere.sharding.tables.goods.key-generator.column=gid
spring.shardingsphere.sharding.tables.goods.key-generator.type=SNOWFLAKE
#
# 指定分片策略 约定gid值是偶数添加到goods_1表，如果gid是奇数添加到goods_2表
spring.shardingsphere.sharding.tables.goods.table-strategy.inline.sharding-column=gid
#水平分表的表达式
spring.shardingsphere.sharding.tables.goods.table-strategy.inline.algorithm-expression=goods_$->{gid % 3}
#
# 最大容忍的时钟回拨毫秒数
spring.shardingsphere.sharding.tables.goods.key-generator.max.tolerate.time.difference.milliseconds=5
#
# 打开sql输出日志
spring.shardingsphere.props.sql.show=true
